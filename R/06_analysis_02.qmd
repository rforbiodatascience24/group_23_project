This file provides a detailed analysis of the Mice Protein Expression dataset. It includes generating heatmaps to visualize protein expression across all samples, different classes, and genotypes. The analysis intends to identify proteins with the highest variability and those showing the largest differences between groups. Statistical methods like t-tests are applied to highlight significant protein variations, providing insights into the dataset's underlying patterns and group-specific differences.

## Load libraries

```{r}
#| message: false
library("tidyverse")
```

## Loading data

```{r}
#| message: false
first_path <- "~/projects/R_project"
file_path <- "data/03_dat_aug.tsv" 
file_path <- file.path(first_path, file_path)

df_aug <- read_tsv(file = file_path)
df <- df_aug
```

## Heatmap of proteins

### Heatmap #1 - All Proteins with all samples

Preparing data for heatmap visualization - changing to the long data, using pivot_longer

```{r}
protein_data_long <- df |>
  select(ends_with("_N"), MouseID) |>
  pivot_longer(-MouseID, 
               names_to = "Protein", 
               values_to = "Expression")

ggplot(data = protein_data_long, 
       mapping = aes(x = Protein, 
                     y = MouseID, 
                     fill = Expression)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", 
                       mid = "white", 
                       high = "red", 
                       midpoint = 0) +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 5, 
                                   angle = 45,
                                   hjust = 1), 
        axis.text.y = element_blank()) +
  labs(title = "Heatmap of Protein Expression (All Mice)",
       x = "Proteins", 
       y = "Samples - MouseID", 
       fill = "Expression")

```

The plot visualizes protein expression across all mice samples, but due to a large number of samples, the plot lacks group-specific information, what makes it difficult to draw conclusions.

### Heatmap #2 - proteins divided by class

Starting with the z-normalization following by min-max normalization to obtain \[-1, 1\]

```{r}
# z - normalization
df_z <- df |>
  mutate(across(ends_with("_N"), ~ scale(.) |>  
                  as.vector()))


# min-max normalization
df <- df_z |>
  mutate(across(ends_with("_N"), ~ (2 * ((. - min(.)) / (max(.) - min(.))) - 1)))


```

```{r}
# Dividing the data set into smaller groups split by class 
class_data <- df |>
  group_split(class)

# Transforming into long data for visualization
class_data_long <- map(class_data, ~ .x |>
  select(ends_with("_N"), MouseID) |> 
  pivot_longer(-MouseID, 
               names_to = "Protein", 
               values_to = "Expression")
)

# Creating heatmaps for each class
# class_data_long - .x
# class_data - .y
heatmaps <- map2(class_data_long, 
                 class_data, ~ {
  # extracting the class name for later plot title                 
  class_name <- .y |> 
    pull(class)
                   
  ggplot(data = .x, 
         mapping = aes(x = Protein, 
                       y = MouseID, 
                       fill = Expression)) +
    geom_tile() +
    scale_fill_gradient2(low = "blue", 
                         mid = "white", 
                         high = "red", 
                         midpoint = 0) +
    theme_minimal() +
    theme(axis.text.x = element_text(size = 5, 
                                     angle = 45, 
                                     hjust = 1), 
          axis.text.y = element_blank()) +
    labs(title = paste("Heatmap for Class:", class_name),
         x = "Proteins", 
         y = "MouseID", 
         fill = "Expression")
})
walk(heatmaps, print)

```

Having plots divided by class allows a clearer visualization of proteins, but it still does not highlight any noticeable patterns.

### Heatmap #3 - divided by genotype

#### Data manipulation

```{r}
trisomy_data <- df |>
  filter(Genotype == 1)

control_data <- df |> 
  filter(Genotype == 0)

protein_columns <- colnames(df |> 
                              select(ends_with("_N")))

trisomy_long <- trisomy_data |>
  select(MouseID, 
         all_of(protein_columns)) |>
  pivot_longer(cols = -MouseID, 
               names_to = "Protein", 
               values_to = "Expression")

control_long <- control_data |>
  select(MouseID, 
         all_of(protein_columns)) |>
  pivot_longer(cols = -MouseID, 
               names_to = "Protein", 
               values_to = "Expression")


```

#### Plots

```{r}
ggplot(data = trisomy_long, 
       mapping = aes(x = Protein, 
                     y = MouseID, 
                     fill = Expression)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", 
                       mid = "white", 
                       high = "red", 
                       midpoint = 0) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, 
                               hjust = 1,
                               size = 4),
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Heatmap of Protein Expression (Trisomy)",
    x = "Proteins",
    y = "Samples - MouseID",
    fill = "Expression"
  )

ggplot(data = control_long, 
       mapping = aes(x = Protein, 
                         y = MouseID, 
                         fill = Expression)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", 
                       mid = "white", 
                       high = "red", 
                       midpoint = 0) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, 
                               hjust = 1,
                               size = 4),
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Heatmap of Protein Expression (Control)",
    x = "Proteins",
    y = "MouseID",
    fill = "Expression"
  )

```

Direct comparison between the Trisomy and the Control.

Overall the created heatmaps of Samples vs Proteins are not as informative as expected. There are few conclusions we can draw from them, ex. there is a clear impact coming from the Stimulation factor.

### Heatmap #4 among proteins

#### All proteins

```{r}
correlation_matrix <- df |>
  select(ends_with("_N")) |> 
  cor()

correlation_long <- correlation_matrix |>
  as_tibble(rownames = "Protein1") |>
  pivot_longer(-Protein1, 
               names_to = "Protein2", 
               values_to = "Correlation")

ggplot(correlation_long, aes(x = Protein1, 
                             y = Protein2, 
                             fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", 
                       mid = "white", 
                       high = "red", 
                       midpoint = 0) +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 5, 
                                   angle = 45, 
                                   hjust = 1),
        axis.text.y = element_text(size = 5, 
                                   angle = 0, 
                                   hjust = 1)) +
  labs(title = "Heatmap of Protein Correlations (All Samples)",
       x = "Protein name",
       y = "Protein name",
       fill = "Correlation")

```

This heatmap provides with an overview on the relationships between all protein pairs, which could be useful for pathway analysis.

#### Proteins per class

Dividing the data by class and visualizing the heatmap can show us potential interactions between proteins among certain groups

```{r}
corr_data_long <- map(class_data, ~ .x |>
  select(ends_with("_N")) |>
  cor() |>
  as_tibble(rownames = "Protein1") |>
  pivot_longer(-Protein1, 
               names_to = "Protein2", 
               values_to = "Correlation")
)

corr_heatmaps <- map2(corr_data_long, 
                 class_data, ~ {
  class_name <- .y |> 
    pull(class)
                   
  ggplot(data = .x, 
         mapping = aes(x = Protein1, 
                       y = Protein2, 
                       fill = Correlation)) +
    geom_tile() +
    scale_fill_gradient2(low = "blue", 
                         mid = "white", 
                         high = "red", 
                         midpoint = 0) +
    theme_minimal() +
    theme(axis.text.x = element_text(size = 5, 
                                     angle = 45, 
                                     hjust = 1), 
          axis.text.y = element_text(size = 5)) +  
    labs(title = paste("Heatmap for Class:", class_name),
         x = "Protein 1", 
         y = "Protein 2", 
         fill = "Correlation")

})
walk(corr_heatmaps, print)
```

Heatmaps repeatedly show impact of stimulus to protein expression. We can also start to recognize certains groups of proteins that show higher correlations.

#### Proteins per genotype

```{r}
gen_data <- df |>
  group_split(Genotype)
  
corr_gen_data_long <- map(gen_data, ~ .x |>
  select(ends_with("_N")) |>
  cor() |>
  as_tibble(rownames = "Protein1") |>
  pivot_longer(-Protein1, 
               names_to = "Protein2", 
               values_to = "Correlation")
)

corr_heatmaps <- map2(corr_gen_data_long, 
                      gen_data, ~ {
                        genotype_name <- .y |> 
                          pull(Genotype)
                        
                        class_name <- ifelse(genotype_name == 1,
                                             "Trisomy",
                                             "Control")
                   
  ggplot(data = .x, 
         mapping = aes(x = Protein1, 
                       y = Protein2, 
                       fill = Correlation)) +
    geom_tile() +
    scale_fill_gradient2(low = "blue", 
                         mid = "white", 
                         high = "red", 
                         midpoint = 0) +
    theme_minimal() +
    theme(axis.text.x = element_text(size = 3, 
                                     angle = 45, 
                                     hjust = 1), 
          axis.text.y = element_text(size = 3)) +  
    labs(title = paste("Heatmap for Class:", class_name),
         x = "Protein 1", 
         y = "Protein 2", 
         fill = "Correlation")

})
walk(corr_heatmaps, print)
```

Having obtained the above results, we can visually select areas on the heatmap which show high correlations for example between pNR1_N and pNR2A.

## Analysis

Proteins with the largest differences in correlation might serve as biomarkers for distinguishing trisomy from control.

### Correlation in proteins, by genotype

```{r}
combined_corr_data <- bind_rows(corr_gen_data_long,
                                .id = "Genotype")
gen_corr_list <- combined_corr_data |>
  filter(Protein1 != Protein2) |>
  distinct(Protein1, Protein2, .keep_all = TRUE) |>
  arrange(desc(Correlation)) 

gen_corr_list
```

Analytical calculations provide us with pairs with the highest correlations, which match the conclusions drawn from the previous heatmap.

### Highest variability in proteins

Trying to distinguish the proteins with the biggest sd

```{r}
most_variable_proteins <- df |>
  select(ends_with("_N")) |>
  summarise(across(everything(), 
                   sd, 
                   na.rm = TRUE)) |>
  pivot_longer(cols = everything(), 
               names_to = "Protein", 
               values_to = "SD") |>
  arrange(desc(SD)) |>
  slice_head(n = 10)

most_variable_proteins
```

### Biggest differences between the groups

Trying to identify the proteins that differ the most between the trisomy and the control group

```{r}
group_means <- df |>
  group_by(Genotype) |>
  summarise(across(ends_with("_N"), 
                   mean, 
                   na.rm = TRUE)) |>
  pivot_longer(cols = -Genotype, 
               names_to = "Protein", 
               values_to = "MeanExpression")

protein_differences <- group_means |>
  pivot_wider(names_from = Genotype, 
              values_from = MeanExpression, 
              names_prefix = "Genotype_") |>
  mutate(Difference = abs(Genotype_1 - Genotype_0)) |>
  arrange(desc(Difference)) |>
  slice_head(n = 10)

protein_differences
```

### T-test

Using t-test to identify the proteins variety between the trisomy and the control group

```{r}
t_test_results <- df |>
  pivot_longer(cols = ends_with("_N"), 
               names_to = "Protein", 
               values_to = "Expression") |>
  group_by(Protein) |>
  summarise(p_value = t.test(Expression ~ Genotype, 
                             data = cur_data())$p.value) |>
  arrange(p_value) |>
  slice_head(n = 10)  

t_test_results

```

Proteins like APP_N, S6_N, and Tau_N stand out with very low p-values, indicating strong genotype-dependent effects.
