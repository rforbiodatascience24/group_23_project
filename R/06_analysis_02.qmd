This file provides a detailed analysis of the Mice Protein Expression dataset. It includes generating heatmaps to visualize protein expression across all samples, different classes, and genotypes. The analysis intends to dentify proteins with the highest variability and those showing the largest differences between groups. Statistical methods like t-tests are applied to highlight significant protein variations, providing insights into the dataset's underlying patterns and group-specific differences.

## Load libraries

```{r}
#| message: false
library("tidyverse")
```

## Loading data

```{r}
#| message: false
first_path <- "~/projects/R_project/"
file_path <- "data/03_dat_aug.tsv" 
file_path <- file.path(first_path, file_path)

df_aug <- read_tsv(file = file_path)
df <- df_aug
```

## Heatmap of proteins

### Heatmap #1 - All Proteins with all samples

Preparing data for heatmap visualization - changing to the long data, using pivot_longer

```{r}
protein_data_long <- df |>
  select(ends_with("_N"), MouseID) |>
  pivot_longer(-MouseID, 
               names_to = "Protein", 
               values_to = "Expression")

ggplot(data = protein_data_long, 
       mapping = aes(x = Protein, 
                     y = MouseID, 
                     fill = Expression)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", 
                       mid = "white", 
                       high = "red", 
                       midpoint = 0) +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 5, 
                                   angle = 45,
                                   hjust = 1), 
        axis.text.y = element_blank()) +
  labs(title = "Heatmap of Protein Expression (All Mice)",
       x = "Proteins", 
       y = "Samples - MouseID", 
       fill = "Expression")

```

The plot above doesn't look very informative, so we proceed with another solution.

### Heatmap #2 - proteins divided by class

Starting with the z-normalization following by min-max normalization to obtain \[-1, 1\]

```{r}
df_z <- df |>
  mutate(across(ends_with("_N"), ~ scale(.) |>  
                  as.vector()))


df <- df_z |>
  mutate(across(ends_with("_N"), ~ (2 * ((. - min(.)) / (max(.) - min(.))) - 1)))


```

```{r}
# Dividing the data set into smaller groups split by class 
class_data <- df |>
  group_split(class)

# Transforming into long data for visualization
class_data_long <- map(class_data, ~ .x |>
  select(ends_with("_N"), MouseID) |> 
  pivot_longer(-MouseID, 
               names_to = "Protein", 
               values_to = "Expression")
)

# Creating heatmaps for each class
# class_data_long - .x
# class_data - .y
heatmaps <- map2(class_data_long, 
                 class_data, ~ {
                   
  class_name <- .y |> 
    pull(class)
                   
  ggplot(data = .x, 
         mapping = aes(x = Protein, 
                       y = MouseID, 
                       fill = Expression)) +
    geom_tile() +
    scale_fill_gradient2(low = "blue", 
                         mid = "white", 
                         high = "red", 
                         midpoint = 0) +
    theme_minimal() +
    theme(axis.text.x = element_text(size = 5, 
                                     angle = 45, 
                                     hjust = 1), 
          axis.text.y = element_blank()) +
    labs(title = paste("Heatmap for Class:", class_name),
         x = "Proteins", 
         y = "MouseID", 
         fill = "Expression")
})
walk(heatmaps, print)

```

### Heatmap #3 - divided by genotype

#### Data manipulation

```{r}
trisomy_data <- df |>
  filter(Genotype == 1)

control_data <- df |> 
  filter(Genotype == 0)

protein_columns <- colnames(df |> 
                              select(ends_with("_N")))

trisomy_long <- trisomy_data |>
  select(MouseID, 
         all_of(protein_columns)) |>
  pivot_longer(cols = -MouseID, 
               names_to = "Protein", 
               values_to = "Expression")

control_long <- control_data |>
  select(MouseID, 
         all_of(protein_columns)) |>
  pivot_longer(cols = -MouseID, 
               names_to = "Protein", 
               values_to = "Expression")


```

#### Plots

```{r}
ggplot(data = trisomy_long, 
       mapping = aes(x = Protein, 
                     y = MouseID, 
                     fill = Expression)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", 
                       mid = "white", 
                       high = "red", 
                       midpoint = 0) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, 
                               hjust = 1,
                               size = 4),
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Heatmap of Protein Expression (Trisomy)",
    x = "Proteins",
    y = "Samples - MouseID",
    fill = "Expression"
  )

ggplot(data = control_long, 
       mapping = aes(x = Protein, 
                         y = MouseID, 
                         fill = Expression)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", 
                       mid = "white", 
                       high = "red", 
                       midpoint = 0) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, 
                               hjust = 1,
                               size = 4),
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Heatmap of Protein Expression (Control)",
    x = "Proteins",
    y = "MouseID",
    fill = "Expression"
  )

```

### Heatmap #4 among proteins

#### All proteins

```{r}
correlation_matrix <- df |>
  select(ends_with("_N")) |> 
  cor()

correlation_long <- correlation_matrix |>
  as_tibble(rownames = "Protein1") |>
  pivot_longer(-Protein1, 
               names_to = "Protein2", 
               values_to = "Correlation")

ggplot(correlation_long, aes(x = Protein1, 
                             y = Protein2, 
                             fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", 
                       mid = "white", 
                       high = "red", 
                       midpoint = 0) +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 5, 
                                   angle = 45, 
                                   hjust = 1),
        axis.text.y = element_text(size = 5, 
                                   angle = 0, 
                                   hjust = 1)) +
  labs(title = "Heatmap of Protein Correlations (All Samples)",
       x = "Protein name",
       y = "Protein name",
       fill = "Correlation")

```

#### Proteins per class

```{r}
corr_data_long <- map(class_data, ~ .x |>
  select(ends_with("_N")) |>
  cor() |>
  as_tibble(rownames = "Protein1") |>
  pivot_longer(-Protein1, 
               names_to = "Protein2", 
               values_to = "Correlation")
)

corr_heatmaps <- map2(corr_data_long, 
                 class_data, ~ {
  class_name <- .y |> 
    pull(class)
                   
  ggplot(data = .x, 
         mapping = aes(x = Protein1, 
                       y = Protein2, 
                       fill = Correlation)) +
    geom_tile() +
    scale_fill_gradient2(low = "blue", 
                         mid = "white", 
                         high = "red", 
                         midpoint = 0) +
    theme_minimal() +
    theme(axis.text.x = element_text(size = 5, 
                                     angle = 45, 
                                     hjust = 1), 
          axis.text.y = element_text(size = 5)) +  
    labs(title = paste("Heatmap for Class:", class_name),
         x = "Protein 1", 
         y = "Protein 2", 
         fill = "Correlation")

})
walk(corr_heatmaps, print)
```

#### Proteins per genotype

```{r}
gen_data <- df |>
  group_split(Genotype)
  
corr_gen_data_long <- map(gen_data, ~ .x |>
  select(ends_with("_N")) |>
  cor() |>
  as_tibble(rownames = "Protein1") |>
  pivot_longer(-Protein1, 
               names_to = "Protein2", 
               values_to = "Correlation")
)

corr_heatmaps <- map2(corr_gen_data_long, 
                      gen_data, ~ {
                        genotype_name <- .y |> 
                          pull(Genotype)
                        
                        class_name <- ifelse(genotype_name == 1,
                                             "Trisomy",
                                             "Control")
                   
  ggplot(data = .x, 
         mapping = aes(x = Protein1, 
                       y = Protein2, 
                       fill = Correlation)) +
    geom_tile() +
    scale_fill_gradient2(low = "blue", 
                         mid = "white", 
                         high = "red", 
                         midpoint = 0) +
    theme_minimal() +
    theme(axis.text.x = element_text(size = 3, 
                                     angle = 45, 
                                     hjust = 1), 
          axis.text.y = element_text(size = 3)) +  
    labs(title = paste("Heatmap for Class:", class_name),
         x = "Protein 1", 
         y = "Protein 2", 
         fill = "Correlation")

})
walk(corr_heatmaps, print)
```

Having obtained the above results, we can visually select areas on the heatmap which show high correlations for example between pNR1_N and pNR2A

## Analysis

### Correlation in proteins, by genotype

```{r}
combined_corr_data <- bind_rows(corr_gen_data_long,
                                .id = "Genotype")
gen_corr_list <- combined_corr_data |>
  filter(Protein1 != Protein2) |>
  distinct(Protein1, Protein2, .keep_all = TRUE) |>
  arrange(desc(Correlation)) 

gen_corr_list
```

### Highest variability in proteins

Trying to distinguish the proteins with the biggest sd

```{r}
most_variable_proteins <- df |>
  select(ends_with("_N")) |>
  summarise(across(everything(), 
                   sd, 
                   na.rm = TRUE)) |>
  pivot_longer(cols = everything(), 
               names_to = "Protein", 
               values_to = "SD") |>
  arrange(desc(SD)) |>
  slice_head(n = 10)

most_variable_proteins
```

### Biggest differences between the groups

Trying to identify the proteins that differ the most between the trisomy and the control group

```{r}
group_means <- df |>
  group_by(Genotype) |>
  summarise(across(ends_with("_N"), 
                   mean, 
                   na.rm = TRUE)) |>
  pivot_longer(cols = -Genotype, 
               names_to = "Protein", 
               values_to = "MeanExpression")

protein_differences <- group_means |>
  pivot_wider(names_from = Genotype, 
              values_from = MeanExpression, 
              names_prefix = "Genotype_") |>
  mutate(Difference = abs(Genotype_1 - Genotype_0)) |>
  arrange(desc(Difference)) |>
  slice_head(n = 10)

protein_differences
```

### T-test

Using t-test to identify the proteins variety between the trisomy and the control group

```{r}
t_test_results <- df |>
  pivot_longer(cols = ends_with("_N"), 
               names_to = "Protein", 
               values_to = "Expression") |>
  group_by(Protein) |>
  summarise(p_value = t.test(Expression ~ Genotype, 
                             data = cur_data())$p.value) |>
  arrange(p_value) |>
  slice_head(n = 10)  

t_test_results

```

```{r}
correlation_matrix <- df |>
  select(ends_with("_N")) |>
  cor()

correlation_long <- correlation_matrix |>
  as_tibble(rownames = "Protein1") |>  
  pivot_longer(-Protein1, 
               names_to = "Protein2", 
               values_to = "Correlation")

ggplot(correlation_long, aes(x = Protein1, 
                             y = Protein2, 
                             fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", 
                       mid = "white", 
                       high = "red", 
                       midpoint = 0) + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 1)) +  
  labs(title = "Heatmap of Protein Correlations",
       x = "Protein 1",
       y = "Protein 2",
       fill = "Correlation")

```
