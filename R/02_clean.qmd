---
title: "02_clean"
format: html
editor: visual
---

In this file, we take the raw data we have in the *data* folder, and we clean it from NAs.

## Loading libraries

```{r}
#| message: false
library("tidyverse")
```

## Loading data

```{r}
first_path <- "~/projects/R_project"
file_path <- file.path(first_path, 
                       "data/01_dat_load.tsv")
df <- read_tsv(file = file_path)
```

## Cleaning data

```{r}
proteins <- df |>
  select(2:78) |>
  names()

classes <- df |>
  distinct(class) |>
  pull(class)
```

Checking how many missing values appear in each column.

```{r}
missing_summary <- colSums(is.na(df))
print(missing_summary)
```

In the shown data we can see that it is mostly full, with few exceptions, when the number of NaNs is above 20 (around 2%). For the data we decided to proceed with replacing the missing data with mean values based on the class, as deleting all of the values could result in missing a big part of data, without which we could not analyse it properly.

Replacing the missing data (NaN) with mean values within each class

```{r}
df <- as.data.frame(df)

df_mean <- df |>
  group_by(class) |>
  mutate(across(everything(),
                ~ ifelse(is.na(.),
                         mean(., na.rm = TRUE), .))) |>
  ungroup()

missing_summary <- colSums(is.na(df_mean))

print(missing_summary)
```

## Reshape data for visualization

```{r}
df_long <- df |>
  pivot_longer(cols = c(H3MeK4_N, 
                      EGR1_N, 
                      H3AcK18_N, 
                      BCL2_N, 
                      pCFOS_N, 
                      BAD_N),
             names_to = "Protein", 
             values_to = "Expression")

df_mean_long <- df_mean |>
  pivot_longer(cols = c(H3MeK4_N, 
                        EGR1_N, 
                        H3AcK18_N, 
                        BCL2_N, 
                        pCFOS_N, 
                        BAD_N),
               names_to = "Protein", 
               values_to = "Expression")

# Combine all datasets for comparison 

df_compare <- df_long |>
  mutate(Method = "Original") |>
  bind_rows(
    df_mean_long |>
      mutate(Method = "Mean Replacement")
    )

# Plot density
ggplot(data = df_compare, 
       mapping = aes(x = Expression, 
                     fill = Method)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Protein, 
             scales = "fixed") +
  theme_minimal() +
  labs(title = "Distribution of Protein Expression After Replacements",
       x = "Expression Level",
       y = "Density")
```

Plot shows a distribution of expression levels for the six proteins which had the highest number of missing values. The plot suggests that the overall shape of the density curve stays similar, and the mean replacement does not distort the distribution. We can also notice that in certain proteins there is a slight difference in the density peak.

Such replacement could potentially alter results of further analysis, as it makes the data more concentrated around the mean values, but overall it preserves the data distribution.

Writing the cleaned .tsv file in the *data* folder:

```{r}
file_path <- "data/02_dat_clean.tsv"
file_path <- file.path(first_path, 
                       file_path)

df <- df_mean

df |>
  write_tsv(file = file_path)
```
